/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PageJsonDataService } from "../pageJsonData.service";
import { PageJsonDataCreateInput } from "./PageJsonDataCreateInput";
import { PageJsonData } from "./PageJsonData";
import { PageJsonDataFindManyArgs } from "./PageJsonDataFindManyArgs";
import { PageJsonDataWhereUniqueInput } from "./PageJsonDataWhereUniqueInput";
import { PageJsonDataUpdateInput } from "./PageJsonDataUpdateInput";

export class PageJsonDataControllerBase {
  constructor(protected readonly service: PageJsonDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PageJsonData })
  async createPageJsonData(
    @common.Body() data: PageJsonDataCreateInput
  ): Promise<PageJsonData> {
    return await this.service.createPageJsonData({
      data: {
        ...data,

        page: data.page
          ? {
              connect: data.page,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PageJsonData] })
  @ApiNestedQuery(PageJsonDataFindManyArgs)
  async pageJsonDataItems(
    @common.Req() request: Request
  ): Promise<PageJsonData[]> {
    const args = plainToClass(PageJsonDataFindManyArgs, request.query);
    return this.service.pageJsonDataItems({
      ...args,
      select: {
        createdAt: true,
        data: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PageJsonData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pageJsonData(
    @common.Param() params: PageJsonDataWhereUniqueInput
  ): Promise<PageJsonData | null> {
    const result = await this.service.pageJsonData({
      where: params,
      select: {
        createdAt: true,
        data: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PageJsonData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePageJsonData(
    @common.Param() params: PageJsonDataWhereUniqueInput,
    @common.Body() data: PageJsonDataUpdateInput
  ): Promise<PageJsonData | null> {
    try {
      return await this.service.updatePageJsonData({
        where: params,
        data: {
          ...data,

          page: data.page
            ? {
                connect: data.page,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,
          id: true,

          page: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PageJsonData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePageJsonData(
    @common.Param() params: PageJsonDataWhereUniqueInput
  ): Promise<PageJsonData | null> {
    try {
      return await this.service.deletePageJsonData({
        where: params,
        select: {
          createdAt: true,
          data: true,
          id: true,

          page: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
