/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FileInput as PrismaFileInput,
  Page as PrismaPage,
} from "@prisma/client";

export class FileInputServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileInputCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileInput.count(args);
  }

  async fileInputs<T extends Prisma.FileInputFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileInputFindManyArgs>
  ): Promise<PrismaFileInput[]> {
    return this.prisma.fileInput.findMany<Prisma.FileInputFindManyArgs>(args);
  }
  async fileInput<T extends Prisma.FileInputFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileInputFindUniqueArgs>
  ): Promise<PrismaFileInput | null> {
    return this.prisma.fileInput.findUnique(args);
  }
  async createFileInput<T extends Prisma.FileInputCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileInputCreateArgs>
  ): Promise<PrismaFileInput> {
    return this.prisma.fileInput.create<T>(args);
  }
  async updateFileInput<T extends Prisma.FileInputUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileInputUpdateArgs>
  ): Promise<PrismaFileInput> {
    return this.prisma.fileInput.update<T>(args);
  }
  async deleteFileInput<T extends Prisma.FileInputDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileInputDeleteArgs>
  ): Promise<PrismaFileInput> {
    return this.prisma.fileInput.delete(args);
  }

  async findPages(
    parentId: string,
    args: Prisma.PageFindManyArgs
  ): Promise<PrismaPage[]> {
    return this.prisma.fileInput
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pages(args);
  }
}
