/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInputService } from "../fileInput.service";
import { FileInputCreateInput } from "./FileInputCreateInput";
import { FileInput } from "./FileInput";
import { FileInputFindManyArgs } from "./FileInputFindManyArgs";
import { FileInputWhereUniqueInput } from "./FileInputWhereUniqueInput";
import { FileInputUpdateInput } from "./FileInputUpdateInput";
import { PageFindManyArgs } from "../../page/base/PageFindManyArgs";
import { Page } from "../../page/base/Page";
import { PageWhereUniqueInput } from "../../page/base/PageWhereUniqueInput";

export class FileInputControllerBase {
  constructor(protected readonly service: FileInputService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileInput })
  async createFileInput(
    @common.Body() data: FileInputCreateInput
  ): Promise<FileInput> {
    return await this.service.createFileInput({
      data: data,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileInput] })
  @ApiNestedQuery(FileInputFindManyArgs)
  async fileInputs(@common.Req() request: Request): Promise<FileInput[]> {
    const args = plainToClass(FileInputFindManyArgs, request.query);
    return this.service.fileInputs({
      ...args,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileInput(
    @common.Param() params: FileInputWhereUniqueInput
  ): Promise<FileInput | null> {
    const result = await this.service.fileInput({
      where: params,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileInput(
    @common.Param() params: FileInputWhereUniqueInput,
    @common.Body() data: FileInputUpdateInput
  ): Promise<FileInput | null> {
    try {
      return await this.service.updateFileInput({
        where: params,
        data: data,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileInput(
    @common.Param() params: FileInputWhereUniqueInput
  ): Promise<FileInput | null> {
    try {
      return await this.service.deleteFileInput({
        where: params,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pages")
  @ApiNestedQuery(PageFindManyArgs)
  async findPages(
    @common.Req() request: Request,
    @common.Param() params: FileInputWhereUniqueInput
  ): Promise<Page[]> {
    const query = plainToClass(PageFindManyArgs, request.query);
    const results = await this.service.findPages(params.id, {
      ...query,
      select: {
        contentType: true,
        createdAt: true,

        fileInput: {
          select: {
            id: true,
          },
        },

        id: true,
        pageNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pages")
  async connectPages(
    @common.Param() params: FileInputWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        connect: body,
      },
    };
    await this.service.updateFileInput({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pages")
  async updatePages(
    @common.Param() params: FileInputWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        set: body,
      },
    };
    await this.service.updateFileInput({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pages")
  async disconnectPages(
    @common.Param() params: FileInputWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        disconnect: body,
      },
    };
    await this.service.updateFileInput({
      where: params,
      data,
      select: { id: true },
    });
  }
}
